package backend.academy.transformation;

import backend.academy.domain.Point;

/**
 * Класс для выполнения вихревой трансформации точек.
 * Эта трансформация создает вихревые эффекты, изменяя координаты точки с использованием синусоидальных
 * и косинусоидальных функций, зависящих от квадрата расстояния точки от начала координат.
 */
public class SwirlTransformation implements Transformation {

    /**
     * Применяет вихревую трансформацию к координатам точки.
     * В этой трансформации новые координаты точки рассчитываются на основе синуса
     * и косинуса от квадрата расстояния до центра, что создает вихревой эффект.
     *
     * @param p Исходная точка, координаты которой будут трансформированы.
     * @return Новая точка, координаты которой являются результатом применения вихревой трансформации.
     */
    @Override
    public Point transform(Point p) {
        double r2 = p.x() * p.x() + p.y() * p.y();
        return new Point(p.x() * Math.sin(r2) - p.y() * Math.cos(r2),
            p.x() * Math.cos(r2) + p.y() * Math.sin(r2));
    }
}
